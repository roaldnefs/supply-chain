// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/utils/math/SafeMath.sol";
import "../core/Ownable.sol";
import "../accesscontrol/FisherRole.sol";
import "../accesscontrol/DistributorRole.sol";
import "../accesscontrol/RetailerRole.sol";
import "../accesscontrol/ConsumerRole.sol";


contract SupplyChain is Ownable, FisherRole, DistributorRole, RetailerRole, ConsumerRole {
    // Allow SafeMath functions to be accaled fo all unint256 types.
    using SafeMath for uint256;

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint upc;
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint sku;
    // Define a public mapping 'items' that maps the UPC to an Item
    mapping(uint => Item) items;
    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Define enum 'State' to indicate the state of an Item
    enum State {
        Fished,     // 0
        ForSale,    // 1
        Sold,       // 2
        Processed,  // 3
        Packed,     // 4
        Shipped,    // 5
        Received,   // 6
        Purchased   // 7
    }

    // Define the default 'State' for an Item
    State constant defaultState = State.Fished;

    // Define a struct 'Item' to hold the information of a single product
    struct Item {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc;  // Universal Product Code (UPC), generated by the Fisher, goes on the package,
                      // can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address payable originFisherID; // Metamask-Ethereum address of the Farmer
        string  originFisherName; // Fisher Name
        string  originFisherInformation;  // Fisher Information
        string  originFisherLatitude; // Fisher Latitude
        string  originFisherLongitude;  // Fisher Longitude
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address payable consumerID; // Metamask-Ethereum address of the Consumer
    }

    event Fished(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    /// @dev set both UPC and SKU to 1
    constructor() Ownable() payable {
        sku = 1;
        upc = 1;
    }
}
