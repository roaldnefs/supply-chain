// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "../core/Ownable.sol";
import "../accesscontrol/FisherRole.sol";
import "../accesscontrol/DistributorRole.sol";
import "../accesscontrol/RetailerRole.sol";
import "../accesscontrol/ConsumerRole.sol";


contract SupplyChain is Ownable, FisherRole, DistributorRole, RetailerRole, ConsumerRole {
    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint upc;
    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint sku;
    // Define a public mapping 'items' that maps the UPC to an Item
    mapping(uint => Item) items;
    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping (uint => string[]) itemsHistory;

    // Define enum 'State' to indicate the state of an Item
    enum State {
        Fished,     // 0
        ForSale,    // 1
        Sold,       // 2
        Processed,  // 3
        Packed,     // 4
        Shipped,    // 5
        Received,   // 6
        Purchased   // 7
    }

    // Define the default 'State' for an Item
    State constant defaultState = State.Fished;

    // Define a struct 'Item' to hold the information of a single product
    struct Item {
        uint    sku;  // Stock Keeping Unit (SKU)
        uint    upc;  // Universal Product Code (UPC), generated by the Fisher, goes on the package,
                      // can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address payable originFisherID; // Metamask-Ethereum address of the Farmer
        string  originFisherName; // Fisher Name
        string  originFisherInformation;  // Fisher Information
        string  originFisherLatitude; // Fisher Latitude
        string  originFisherLongitude;  // Fisher Longitude
        uint    productID;  // Product ID potentially a combination of upc + sku
        string  productNotes; // Product Notes
        uint    productPrice; // Product Price
        State   itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address payable consumerID; // Metamask-Ethereum address of the Consumer
    }

    event Fished(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Processed(uint upc);
    event Packed(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);

    /// @dev defines a modifer that verifies the caller
    modifier verifyCaller(address _address) {
        require(msg.sender==_address); 
        _;
    }

    /// @dev defines a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) { 
        require(msg.value >= _price); 
        _;
    }

    /// @dev define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        items[_upc].consumerID.transfer(amountToReturn);
    }
    
    /// @dev defines a modifier that checks if an item.state of a upc is Fished
    modifier fished(uint _upc) {
        require(items[_upc].itemState == State.Fished);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received);
        _;
    }

    /// @dev defines a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased);
        _;
    }

    /// @dev set both UPC and SKU to 1
    constructor() Ownable() payable {
        sku = 1;
        upc = 1;
    }

      // Define a function 'kill' if required
    function kill() public {
        // Retrieve the original contract owner using the Ownable.owner() method
        address owner = owner();
        if (msg.sender == owner) {
            selfdestruct(payable(owner));
        }
    }

    /// @dev defines a function 'fishItem' that allows a fisher to mark an item 'Fished'
    function fishItem(
        uint _upc,
        address _originFisherID,
        string memory _originFisherName,
        string memory _originFisherInformation,
        string memory _originFisherLatitude,
        string memory _originFisherLongitude,
        string memory _productNotes
    ) onlyFisher public {
        // Add the new item as part of Fished
        Item memory item = Item({
            sku: sku,
            upc: _upc,
            ownerID: _originFisherID,
            originFisherID: payable(_originFisherID),
            originFisherName: _originFisherName,
            originFisherInformation: _originFisherInformation,
            originFisherLatitude: _originFisherLatitude,
            originFisherLongitude: _originFisherLongitude,
            productID: sku + _upc,
            productNotes: _productNotes,
            productPrice: 0,
            itemState: State.Fished,
            distributorID: address(0),
            retailerID: address(0),
            consumerID: payable(address(0))
        });
        items[_upc] = item;

        // Increment sku
        sku = sku + 1;

        // Emit the appropriate event
        emit Fished(_upc);
        
    }

    // Define a function 'sellItem' that allows a fisher to mark an item 'ForSale'
    function sellItem(uint _upc, uint _price) onlyFisher public
        fished(_upc)  // Call modifier to check if upc has passed previous supply chain stage
        verifyCaller(items[_upc].originFisherID)  // Call modifier to verify caller of this function
    {
        // Update the appropriate fields
        items[_upc].productPrice = _price;
        items[_upc].itemState = State.ForSale;
        
        // Emit the appropriate event
        emit ForSale(_upc);
    }

    // Define a function 'buyItem' that allows the disributor to mark an item 'Sold'
    // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
    // and any excess ether sent is refunded back to the buyer
    function buyItem(uint _upc) onlyDistributor public payable 
        forSale(_upc)  // Call modifier to check if upc has passed previous supply chain stage
        paidEnough(items[_upc].productPrice)  // Call modifer to check if buyer has paid enough  
        checkValue(_upc)  // Call modifer to send any excess ether back to buyer
    {
        // Update the appropriate fields - ownerID, distributorID, itemState
        items[_upc].ownerID = msg.sender;
        items[_upc].distributorID = msg.sender;
        items[_upc].itemState = State.Sold;
        
        // Transfer money to fisher
        items[_upc].originFisherID.transfer(items[_upc].productPrice);
        
        // Emit the appropriate event
        emit Sold(_upc);
    }

    // Define a function 'processtItem' that allows a distributor to mark an item 'Processed'
    function processItem(uint _upc) onlyDistributor public 
        sold(_upc) // Call modifier to check if upc has passed previous supply chain stage
        verifyCaller(items[_upc].distributorID)  // Call modifier to verify caller of this function
    {
        // TODO: Update the appropriate fields
        
        // TODO: Emit the appropriate event
        
    }

    // Define a function 'packItem' that allows a distributor to mark an item 'Packed'
    function packItem(uint _upc) onlyDistributor public 
        processed(_upc)  // Call modifier to check if upc has passed previous supply chain stage
        verifyCaller(items[_upc].distributorID)  // Call modifier to verify caller of this function
    {
        // TODO: Update the appropriate fields
        
        // TODO: Emit the appropriate event
        
    }

    // Define a function 'shipItem' that allows the distributor to mark an item 'Shipped'
    // Use the above modifers to check if the item is sold
    function shipItem(uint _upc) onlyDistributor public 
        shipped(_upc)  // Call modifier to check if upc has passed previous supply chain stage
        verifyCaller(items[_upc].distributorID)  // Call modifier to verify caller of this function
    {
        // TODO: Update the appropriate fields
        
        // TODO: Emit the appropriate event
        
    }

    // Define a function 'receiveItem' that allows the retailer to mark an item 'Received'
    // Use the above modifiers to check if the item is shipped
    function receiveItem(uint _upc) onlyRetailer public 
        shipped(_upc) // Call modifier to check if upc has passed previous supply chain stage
    {
        // TODO: Update the appropriate fields - ownerID, retailerID, itemState

        // TODO: Emit the appropriate event
        
    }

    // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'
    // Use the above modifiers to check if the item is received
    function purchaseItem(uint _upc) onlyConsumer public 
        received(_upc)  // Call modifier to check if upc has passed previous supply chain stage
    {
        // TODO: Update the appropriate fields - ownerID, consumerID, itemState
        
        // TODO: Emit the appropriate event
        
    }

    /// Define fuction to fetch raw product details (e.g. fisher name, location, etc.)
    function fetchItemBufferRaw(uint _upc) public view returns
        (
            uint          itemSKU,
            uint          itemUPC,
            address       ownerID,
            address       originFisherID,
            string memory originFisherName,
            string memory originFisherInformation,
            string memory originFisherLatitude,
            string memory originFisherLongitude
        )
    {
        // Assign values to the parameters
        itemSKU=items[_upc].sku;
        itemUPC=items[_upc].upc;
        ownerID=items[_upc].ownerID;
        originFisherID=items[_upc].originFisherID;
        originFisherName=items[_upc].originFisherName;
        originFisherInformation=items[_upc].originFisherInformation;
        originFisherLatitude=items[_upc].originFisherLatitude;
        originFisherLongitude=items[_upc].originFisherLongitude;

        return (
            itemSKU,
            itemUPC,
            ownerID,
            originFisherID,
            originFisherName,
            originFisherInformation,
            originFisherLatitude,
            originFisherLongitude
        );
    }

    // Define function to fetch proccessed product details (e.g. product ID, price, notes, etc.)
    function fetchItemBufferProcessed(uint _upc) public view returns
        (
            uint          itemSKU,
            uint          itemUPC,
            uint          productID,
            string memory productNotes,
            uint          productPrice,
            uint          itemState,
            address       distributorID,
            address       retailerID,
            address       consumerID
        )
    {
        // Assign values to the 9 parameters
        itemSKU=items[_upc].sku;
        itemUPC=items[_upc].upc;
        productID=items[_upc].productID;
        productNotes=items[_upc].productNotes;
        productPrice=items[_upc].productPrice;
        itemState=uint8(items[_upc].itemState);
        distributorID=items[_upc].distributorID;
        retailerID=items[_upc].retailerID;
        consumerID=items[_upc].consumerID;

        return (
            itemSKU,
            itemUPC,
            productID,
            productNotes,
            productPrice,
            itemState,
            distributorID,
            retailerID,
            consumerID
        );
    }
}
